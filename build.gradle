import com.jcraft.jsch.ChannelSftp
import com.jcraft.jsch.JSch

import java.nio.charset.StandardCharsets
import java.nio.file.Files

buildscript {
    dependencies {
        classpath 'com.jcraft:jsch:0.1.55'
    }

}
plugins {
    id 'org.jetbrains.intellij' version '1.1.6'
    id 'java'
}

group 'cn.boz'
version '1.0.20'


sourceCompatibility = 1.11

dependencies {
    compileClasspath 'com.jcraft:jsch:0.1.55'
    implementation 'org.dom4j:dom4j:2.1.3'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation 'org.testng:testng:6.9.10'
    testImplementation 'com.alibaba:fastjson:1.2.4'
}

sourceSets {
    main {
        resources {
            exclude 'PingFang*.ttf'
            exclude 'fontawesome-webfont.ttf'
            exclude 'README.md'
            exclude 'import.zip'
            exclude 'background.jpeg'
            exclude 'README.md'
            exclude 'rebel.xml'
            exclude 'icomoon/icomoon.eot'
            exclude 'icomoon/icomoon.svg'
            exclude 'icomoon/icomoon.woff'
            exclude 'flow.png'
            exclude 'fontawesome-webfont.ttf'
        }
    }
}


// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
//    version = '2021.2.1'
//    localPath = '/Volumes/Mac/App/IntelliJ IDEA.app'
//    localPath = 'F:\\App\\JetBrains\\IntelliJ IDEA 2021.2.1'
//    localPath = 'D:\\App\\ideaIU-2020'
    localPath = 'F:\\App\\JetBrains\\IntelliJ IDEA 2021.1.1'
    instrumentCode = false
//    sandboxDir.set("${project.rootDir}/.sandbox")
    sandboxDir = "${project.rootDir}/.sandbox"
    plugins = ['com.intellij.java', 'JavaScriptLanguage', 'DatabaseTools']


}



patchPluginXml {
    description = """
<![CDATA[
    This is an spd editor plugin,which support features such as flow viewer,Flow editor,flow image export,flow save and so on.
     <br>
     <b>1.Use this plugin start with right key on the project file or directory</b><br>
     <b>2.New->Spd File.</b><br>
     <b>3.Input any filename that you want.</b><br>
     ]]>
    """

    changeNotes = """

    <b>1.0.20</b><br>
    <ul>
        <li>fixed auto save problem's</li>
        <li>ecas menu incubation</li>
        <li>fixed some bug's</li>
    </ul>

    <b>1.0.19</b><br>
    <ul>
        <li>combine goto dao,goto js action into goto ref action</li>
        <li>support goto ref action </li>
        <li>support goto engine action </li>
        <li>fixing addbom action bug's</li>
    </ul>
    
    <b>1.0.18</b><br>
    <ul>
        <li>fixed copy flow problem's</li>
        <li>fixed bug of generate sql when conditionExpression is null</li>
        <li>support features with go to dao </li>
        <li>support features with go to jsfile  </li>
    </ul>
    
    <b>1.0.17</b><br>
    <ul>
        <li>fixed sqlbuild problms</li>
        <li>fixed process lack of businessKey</li>
        <li>navigation to db configuration</li>
    </ul>
    
    <b>1.0.16</b><br>
    <ul>
        <li>fixed lack of businessKey</li>
        <li>fixed sql problem's</li>
    </ul>
    
    <b>1.0.12</b><br>
    <ul>
        <li>fixed some bug while shift between two spd edit.which cause control status actived </li>
        <li>fixed genrate sql bug's</li>
    </ul>
    
    <b>1.0.11</b><br>
    <ul>
        <li>fixed some bugs.</li>
    </ul>
    
    <b>1.0.10</b>
    <ul>
         <li>Icon color change with theme.</li>
         <li>Fixed addbom action problems.</li>
         <li>Fixed button click problems.</li>
         <li>Theme change synchronize with internal theme .</li>
         <li>UI enhancement.</li>
         <li>Compatible with lower version 201.*</li>
         <li>Support update to db features.</li>
         <li>Shrink the size of release package.</li>
    <ul>
      """
    sinceBuild = "200.*"
    untilBuild = ""

}
test {
    useTestNG()
//    exclude '*'
//    include 'cn/boz/test/*'
//    filter{
//        includeTestsMatching("test")
//    }

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
}

runIde {
    autoReloadPlugins = true
}

task "publishPluginLocal" {
//    dependsOn compileJava
    doLast {

        pushFileToSSh()


    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }

    if (task.name.equals("buildSearchableOptions")) {
        task.enabled = false
    }
}
publishPlugin {
//    channels = ['beta']
    channels = ['Stable']
    token = System.getProperty("token")

}


/**
 * 自定义方法将文件以ssh方式推送到ssh服务器
 * @return
 */
def pushFileToSSh(String updatePlugins) {
    try {
        def distributionFilePath = "$buildDir\\$distsDirName\\$archivesBaseName-$version\.zip"
        var cn = patchPluginXml.changeNotes.getOrNull()
        def file = new File(distributionFilePath)
        def flen = file.length()


        var p = java.nio.file.Path.of("$projectDir\\updatePlugins.xml")
        var str = Files.readString(p, StandardCharsets.UTF_8)
        def binding = [
                version    : "$version",
                changeNotes: "$cn",
                desc       : "$patchPluginXml.description",
                cts        : System.currentTimeMillis(),
                flen       : "$flen"
        ]
        def engine = new groovy.text.GStringTemplateEngine()
        String template = engine.createTemplate(str).make(binding)

        var jSch = new JSch();
        jSch.addIdentity(projectDir.path + '\\' + "id_rsa.ppk");
//        var user = 'D-DPDKZJJY-APP+cdadmin'
//        var host = '21.96.60.156'
        var user = 'a-dkzjjy-usr'
        var host = '21.96.35.45'
        var port = 18122
        var session = jSch.getSession(user, host, port);
        session.setConfig("StrictHostKeyChecking", "no");
        session.connect();
        ChannelSftp sftp = (ChannelSftp) session.openChannel("sftp");
        sftp.connect();
        def targetpath = "/cygdrive/e/apiserver/jetbrainsPlugins/"
        println "pushing from $distributionFilePath into\n\t\t $user@$host:$port/$targetpath"
        sftp.put(distributionFilePath, targetpath)
        println 'done'

        println "pushing updatePlugins.xml"
        var bais = new ByteArrayInputStream(template.getBytes(StandardCharsets.UTF_8))

        sftp.put(bais, "$targetpath/updateplugins2.xml")

        sftp.disconnect()
        session.disconnect();

    } catch (Exception e) {
        throw new RuntimeException(e)
    }


}
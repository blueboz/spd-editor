import com.jcraft.jsch.ChannelSftp
import com.jcraft.jsch.JSch
import groovy.text.GStringTemplateEngine

import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    allprojects {
        repositories {

            maven { url 'https://maven.aliyun.com/repository/public' }
            maven { url 'https://maven.aliyun.com/repository/google' }
            maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
            maven { url 'https://maven.aliyun.com/repository/jcenter' }
        }
    }

    dependencies {
        /**
         * 为buildScript添加的依赖，实际是帮助使用IDEA编码的时候，提示代码用，如果不引入，
         * 实际上也是不会导致错误的，以为实际Gradle执行环境的时候，就已经内置了所需要的，
         * 但是对于gradle 并未内置的jar包，则需要自行手工引入以解决包缺少的问题
         */

        classpath 'com.jcraft:jsch:0.1.55'
        classpath 'org.hidetake:gradle-ssh-plugin:2.10.1'
        classpath 'org.codehaus.groovy:groovy-all:2.5.11'
        classpath 'net.sf.json-lib:json-lib:2.4:jdk15'

    }

}
plugins {
    id 'java'
    id 'groovy'
    id "org.jetbrains.intellij" version "1.13.3"

}
project.ext {
    simplever = "1.0.35"
}
def ts = System.currentTimeMillis()

group 'cn.boz'
version simplever + '.' + ts


sourceCompatibility = 1.11

dependencies {
    implementation  'com.jcraft:jsch:0.1.55'
    implementation('org.dom4j:dom4j:2.1.3') {
        exclude module: "pull-parser"
    }
    implementation 'org.apache.commons:commons-lang3:3.9'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation 'org.testng:testng:6.9.10'
    implementation 'com.alibaba:fastjson:1.2.4'
    implementation files('/home/@chenweidian-yfzx/Code/FMS/FMSS_xfunds/xfunds/WebContent/WEB-INF/lib/ojdbc8.jar','/home/@chenweidian-yfzx/Code/FMS/FMSS_xfunds/xfunds/WebContent/WEB-INF/lib/orai18n-19.3.0.0.jar')
//    implementation files("F:/Code/FMS/FMSS_xfunds/xfunds/WebContent/WEB-INF/lib/ojdbc8.jar", "F:/Code/FMS/FMSS_xfunds/xfunds/WebContent/WEB-INF/lib/orai18n-19.3.0.0.jar")
//    implementation 'org.codehaus.groovy:groovy-all:2.5.11' <dependency>
//    compileOnly files(
//            "F:\\App\\ideaIU-2020.1.4.win\\plugins\\JavaScriptLanguage\\lib\\completion-ranking-js-0.0.5.jar",
//            "F:\\App\\ideaIU-2020.1.4.win\\plugins\\JavaScriptLanguage\\lib\\JavaScriptLanguage.jar",
//            "F:\\App\\ideaIU-2020.1.4.win\\plugins\\JavaScriptLanguage\\lib\\javascript-openapi.jar",
//            "F:\\App\\ideaIU-2020.1.4.win\\plugins\\JavaScriptLanguage\\lib\\js-test-common.jar",
//            "F:\\App\\ideaIU-2020.1.4.win\\plugins\\JavaScriptLanguage\\lib\\resources_en.jar`",
//    )
    implementation 'org.freemarker:freemarker:2.3.30'
    implementation 'org.thymeleaf:thymeleaf:3.1.1.RELEASE'

}

sourceSets {
    main {
        resources {
            exclude 'PingFang*.ttf'
            exclude 'fontawesome-webfont.ttf'
            exclude 'README.md'
            exclude 'import.zip'
            exclude 'background.jpeg'
            exclude 'README.md'
            exclude 'rebel.xml'
            exclude 'icomoon/icomoon.eot'
            exclude 'icomoon/icomoon.svg'
            exclude 'icomoon/icomoon.woff'
            exclude 'flow.png'
            exclude 'fontawesome-webfont.ttf'
            exclude 'adobe/**'
            exclude 'font/function/function.eot'
            exclude 'font/function/function.svg'
            exclude 'font/function/function.woff'
        }
    }
}


// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
//    https://cache-redirector.jetbrains.com/www.jetbrains.com/intellij-repository/releases/co
//    m/jetbrains/intellij/idea/ideaIC/2020.1.4/ideaIC-2020.1.4.zip'
//    version = '2020.1.4'
//    localPath = '/Volumes/Mac/App/IntelliJ IDEA.app'
//    localPath = 'F:\\App\\JetBrains\\IntelliJ IDEA 2021.2.1'
//    localPath = 'D:\\App\\ideaIU-2020'
//    localPath = 'F:\\App\\JetBrains\\IntelliJ IDEA 2021.3.2'

//    localPath='F:\\App\\JetBrains\\idea2022'
//    localPath = 'F:\\App\\JetBrains\\ideaIU-2020.1.4.win'

//    localPath="F:/Program Files/JetBrains/IntelliJ IDEA 2023.1.2"
//    localPath="F:\\App\\ideaIU-2020.1.4.win"
	  localPath="/idea/idea-IU-201.8743.12"
//    localSourcesPath=""
//    localPath = 'F:\\App\\JetBrains\\IntelliJ IDEA 2021.1.1'
//    intellijRepository="https://cache-redirector.jetbrains.com/www.jetbrains.com/intellij-repository"
    pluginsRepositories {
//        marketplace()
//        maven(repositoryUrl)
//        custom("http://21.96.35.45:16789/plugins")
        maven{
            url 'http://21.96.35.45:16789/plugins'
        }
    }
//    jreRepository
    instrumentCode = false
//    sandboxDir.set("${project.rootDir}/.sandbox")
    sandboxDir = "${project.rootDir}/.sandbox"
    plugins = ['com.intellij.java',
               'JavaScript',
               'DatabaseTools',
               'Git4Idea',
    ]

    //关于databasePlugins
//    F:\App\JetBrains\IntelliJ IDEA 2021.1.1\plugins\DatabaseTools\lib\database-impl.jar!\META-INF\DatabasePlugin.xml

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
//    options.compilerArgs +="-verbose"
//    options.compilerArgs +="-nowarn"
    options.compilerArgs += '-Xlint:-unchecked'
    options.compilerArgs += '-Xlint:-deprecation'
}


patchPluginXml {
    description = """
<![CDATA[
    This is an spd editor plugin,which support features such as flow viewer,Flow editor,flow image export,flow save and so on.
     <br>
     <b>1.Use this plugin start with right key on the project file or directory</b><br>
     <b>2.New->Spd File.</b><br>
     <b>3.Input any filename that you want.</b><br>
     <br>
      中文版本使用手册+
      在任意目录点击右键，New->SpdFile ，如下图所示，可以建立任何流程图<br>
      <img src="http://21.96.35.45:16789/jetbrainsPlugins/imgs/2021-12-21_095911.png">
     
     ]]>
    """

    changeNotes = """

    <b>1.0.35</b><br>
    <ul>
        <li>fixed foreach gateway lackof expression error</li>
        <li>support more bigger dialog of property editor</li>
        <li>support spd file diff</li>
        <li>support spd db diff</li>
        <li>support go to process</li>
        <li>compare spd file in convience way</li>
        <li>support compare two version of spd file.</li>
        <li>support dataprovider</li>
        <li>support process search v1</li>
        <li>file history git get</li>
        <li>goto ref extend javacode to engineFlow query</li>
        <li>Final version</li>
        <li>Support idea2022 ver</li>
        <li>fixed some uncomfortable feeling</li>
    </ul>
    
    <b>1.0.21</b><br>
    <ul>
        <li>Ecas menu Operator</li>
    </ul>

    <b>1.0.20</b><br>
    <ul>
        <li>fixed auto save problem's</li>
        <li>ecas menu incubation</li>
        <li>fixed some bug's</li>
    </ul>

    <b>1.0.19</b><br>
    <ul>
        <li>combine goto dao,goto js action into goto ref action</li>
        <li>support goto ref action </li>
        <li>support goto engine action </li>
        <li>fixing addbom action bug's</li>
    </ul>
    
    <b>1.0.18</b><br>
    <ul>
        <li>fixed copy flow problem's</li>
        <li>fixed bug of generate sql when conditionExpression is null</li>
        <li>support features with go to dao </li>
        <li>support features with go to jsfile  </li>
    </ul>
    
    <b>1.0.17</b><br>
    <ul>
        <li>fixed sqlbuild problms</li>
        <li>fixed process lack of businessKey</li>
        <li>navigation to db configuration</li>
    </ul>
    
    <b>1.0.16</b><br>
    <ul>
        <li>fixed lack of businessKey</li>
        <li>fixed sql problem's</li>
    </ul>
    
    <b>1.0.12</b><br>
    <ul>
        <li>fixed some bug while shift between two spd edit.which cause control status actived </li>
        <li>fixed genrate sql bug's</li>
    </ul>
    
    <b>1.0.11</b><br>
    <ul>
        <li>fixed some bugs.</li>
    </ul>
    
    <b>1.0.10</b>
    <ul>
         <li>Icon color change with theme.</li>
         <li>Fixed addbom action problems.</li>
         <li>Fixed button click problems.</li>
         <li>Theme change synchronize with internal theme .</li>
         <li>UI enhancement.</li>
         <li>Compatible with lower version 201.*</li>
         <li>Support update to db features.</li>
         <li>Shrink the size of release package.</li>
    <ul>
    
    
      """
    sinceBuild = "200.*"
    untilBuild = ""

}
test {
    useTestNG()
    exclude '*'
    include 'cn/boz/test/*'
    filter{
        includeTestsMatching("test")
    }

}

runIde {
    autoReloadPlugins = true
}


tasks.getByName("initializeIntelliJPlugin").enabled(false)
tasks.getByName("buildSearchableOptions").enabled(false)
//tasks.getByName("test").enabled(false)
tasks.whenTaskAdded { task ->
    if (task.name.contains("lint")) {
        task.enabled = false
    }
    if (task.name.contains("test")) {
//        task.enabled = false
    }
//    if(task.name.contains("prepareSandbox")){
//        task.enabled = false
//    }

//    :buildSearchableOptions
    if (task.name.contains("buildSearchableOptions")) {
        task.enabled = false
    }
    if (task.name.contains("initializeIntelliJPlugin")) {
        task.enabled = false
    }
}

publishPlugin {
//    channels = ['beta']
    channels = ['Stable']
    token = System.getProperty("token")

}




task "publishCommunityEdition" {
    println('#########')
    println(this)
    doLast {
        try {
            println('#########')
            println(this)
            println('#########')
            println(getBuildDir())

            def fpath = "$buildDir\\$distsDirName"
            def fts = fileTree(fpath)
            if (fts.size() == 0) {
                System.err.println "THERE IS NOTHING FILE TO BE PUBLISH"
                return;
            }
            def distributionFilePath = fts.last()
//        def distributionFilePath = "$buildDir\\$distsDirName\\${archivesBaseName}-${version}.zip"
//    println 'ready to publish file'+distributionFilePath
            def dname = distributionFilePath.name
            def dnamerem = dname.substring(0, dname.lastIndexOf('.'))
            def dnamets = dnamerem.substring(dnamerem.lastIndexOf('.') + 1)


//        def distributionFilePath = "$buildDir\\$distsDirName\\${archivesBaseName}-${version}.zip"
            def cn = patchPluginXml.changeNotes.getOrNull()
            println 'ready to publish file' + distributionFilePath
            def file = new File(dname)
            def flen = file.length()


            def p = java.nio.file.Path.of("$projectDir"+java.io.File.separator+"pluginCommunity.xml")
            def str = Files.readString(p, StandardCharsets.UTF_8)
            def ld = LocalDateTime.now()
            def timefmt = ld.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
            println(ext)

            def binding = [
                    version    : simplever + '.' + "$dnamets",
                    changeNotes: "$cn",
                    desc       : "$patchPluginXml.description",
                    cts        : System.currentTimeMillis(),
                    flen       : "$flen",
                    tfmt       : "$timefmt"
            ]

            def engine = new GStringTemplateEngine()
            String template = engine.createTemplate(str).make(binding)

            def jSch = new JSch();
            jSch.addIdentity(projectDir.path + File.separator + "id_rsa.ppk");
//        var user = 'D-DPDKZJJY-APP+cdadmin'
//        var host = '21.96.60.156'
            def user = 'a-dkzjjy-usr'
            def host = '21.96.35.45'
            def port = 18122
            def session = jSch.getSession(user, host, port);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            ChannelSftp sftp = (ChannelSftp) session.openChannel("sftp");
            sftp.connect();
            def targetpath = "/cygdrive/e/apiserver/jetbrainsPlugins/"
            println "pushing from $distributionFilePath.absolutePath into\n\t\t $user@$host:$port/$targetpath"
            sftp.put(distributionFilePath.absolutePath, targetpath)
            println 'done'

            println "pushing updatePlugins.xml"
            def bais = new ByteArrayInputStream(template.getBytes(StandardCharsets.UTF_8))

            sftp.put(bais, "$targetpath/pluginCommunity.xml")


            sftp.disconnect()
            session.disconnect();
            fts.each { f -> f.delete() }


        } catch (Exception e) {
            throw new RuntimeException(e)
        }
    }
}


task "publishPluginLocal" {
    println('#########')
    println(this)
    doLast {
        try {
            println('#########')
            println(this)
            println('#########')
            println(getBuildDir())

            def fpath = "$buildDir\\$distsDirName"
            def fts = fileTree(fpath)
            if (fts.size() == 0) {
                System.err.println "THERE IS NOTHING FILE TO BE PUBLISH"
                return;
            }
            def distributionFilePath = fts.last()
//        def distributionFilePath = "$buildDir\\$distsDirName\\${archivesBaseName}-${version}.zip"
//    println 'ready to publish file'+distributionFilePath
            def dname = distributionFilePath.name
            def dnamerem = dname.substring(0, dname.lastIndexOf('.'))
            def dnamets = dnamerem.substring(dnamerem.lastIndexOf('.') + 1)


//        def distributionFilePath = "$buildDir\\$distsDirName\\${archivesBaseName}-${version}.zip"
            def cn = patchPluginXml.changeNotes.getOrNull()
            println 'ready to publish file' + distributionFilePath
            def file = new File(dname)
            def flen = file.length()


            def p = java.nio.file.Path.of("$projectDir"+java.io.File.separator+"updatePlugins.xml")
            def str = Files.readString(p, StandardCharsets.UTF_8)
            def ld = LocalDateTime.now()
            def timefmt = ld.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
            println(ext)

            def binding = [
                    version    : simplever + '.' + "$dnamets",
                    changeNotes: "$cn",
                    desc       : "$patchPluginXml.description",
                    cts        : System.currentTimeMillis(),
                    flen       : "$flen",
                    tfmt       : "$timefmt"
            ]

            def engine = new GStringTemplateEngine()
            String template = engine.createTemplate(str).make(binding)

            def jSch = new JSch();
            jSch.addIdentity(projectDir.path + File.separator + "id_rsa.ppk");
//        var user = 'D-DPDKZJJY-APP+cdadmin'
//        var host = '21.96.60.156'
            def user = 'a-dkzjjy-usr'
            def host = '21.96.35.45'
            def port = 18122
            def session = jSch.getSession(user, host, port);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            ChannelSftp sftp = (ChannelSftp) session.openChannel("sftp");
            sftp.connect();
            def targetpath = "/cygdrive/e/apiserver/jetbrainsPlugins/"
            println "pushing from $distributionFilePath.absolutePath into\n\t\t $user@$host:$port/$targetpath"
            sftp.put(distributionFilePath.absolutePath, targetpath)
            println 'done'

            println "pushing updatePlugins.xml"
            def bais = new ByteArrayInputStream(template.getBytes(StandardCharsets.UTF_8))

            sftp.put(bais, "$targetpath/updateplugins2.xml")


            sftp.disconnect()
            session.disconnect();
            fts.each { f -> f.delete() }


        } catch (Exception e) {
            throw new RuntimeException(e)
        }
    }
}
